diff --git a/aom_dsp/aom_convolve.c b/aom_dsp/aom_convolve.c
index 7879b88..e83f3db 100644
--- a/aom_dsp/aom_convolve.c
+++ b/aom_dsp/aom_convolve.c
@@ -38,9 +38,10 @@ static void convolve_horiz(const uint8_t *src, ptrdiff_t src_stride,
                            const InterpKernel *x_filters, int x0_q4,
                            int x_step_q4, int w, int h) {
   src -= SUBPEL_TAPS / 2 - 1;
+  #pragma omp simd
   for (int y = 0; y < h; ++y) {
     int x_q4 = x0_q4;
-    for (int x = 0; x < w; ++x) {
+  for (int x = 0; x < w; ++x) {
       const uint8_t *const src_x = &src[x_q4 >> SUBPEL_BITS];
       const int16_t *const x_filter = x_filters[x_q4 & SUBPEL_MASK];
       const int sum = horz_scalar_product(src_x, x_filter);
@@ -57,10 +58,10 @@ static void convolve_vert(const uint8_t *src, ptrdiff_t src_stride,
                           const InterpKernel *y_filters, int y0_q4,
                           int y_step_q4, int w, int h) {
   src -= src_stride * (SUBPEL_TAPS / 2 - 1);
-
+  #pragma omp simd
   for (int x = 0; x < w; ++x) {
     int y_q4 = y0_q4;
-    for (int y = 0; y < h; ++y) {
+  for (int y = 0; y < h; ++y) {
       const unsigned char *src_y = &src[(y_q4 >> SUBPEL_BITS) * src_stride];
       const int16_t *const y_filter = y_filters[y_q4 & SUBPEL_MASK];
       const int sum = vert_scalar_product(src_y, src_stride, y_filter);
