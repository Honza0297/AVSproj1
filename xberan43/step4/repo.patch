diff --git a/av1/common/convolve.c b/av1/common/convolve.c
index e177e3c..9a721e4 100644
--- a/av1/common/convolve.c
+++ b/av1/common/convolve.c
@@ -264,18 +264,30 @@ void av1_dist_wtd_convolve_2d_c(const uint8_t *src, int src_stride,
   const uint8_t *src_horiz = src - fo_vert * src_stride;
   const int16_t *x_filter = av1_get_interp_filter_subpel_kernel(
       filter_params_x, subpel_x_qn & SUBPEL_MASK);
+
+  #pragma omp simd 
+  for(int i = 0; i < im_h*w ; ++i)
+  {
+    im_block[i] = (1 << (bd + FILTER_BITS - 1));
+  }
+ 
+  
   for (int y = 0; y < im_h; ++y) {
-    for (int x = 0; x < w; ++x) {
-      int32_t sum = (1 << (bd + FILTER_BITS - 1));
-      for (int k = 0; k < filter_params_x->taps; ++k) {
-        sum += x_filter[k] * src_horiz[y * src_stride + x - fo_horiz + k];
+    for (int k = 0; k < filter_params_x->taps; ++k){
+      #pragma omp simd
+      for (int x = 0; x < w; ++x) {
+        im_block[y * im_stride + x] += x_filter[k] * src_horiz[y * src_stride + x - fo_horiz + k];
       }
-      assert(0 <= sum && sum < (1 << (bd + FILTER_BITS + 1)));
-      im_block[y * im_stride + x] =
-          (int16_t)ROUND_POWER_OF_TWO(sum, conv_params->round_0);
     }
   }
 
+  for(int i =0; i < im_h*w; ++i)
+  {
+    assert(0 <= im_block[i] && im_block[i] < (1 << (bd + FILTER_BITS + 1)));
+    im_block[i] = (int16_t)ROUND_POWER_OF_TWO(im_block[i], conv_params->round_0);	
+  }
+
+
   // vertical filter
   int16_t *src_vert = im_block + fo_vert * im_stride;
   const int16_t *y_filter = av1_get_interp_filter_subpel_kernel(
